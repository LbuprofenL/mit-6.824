package main

//
// a pagerank application "plugin" for MapReduce.
//
// go build -buildmode=plugin pre_pr.go
//

import (
	"fmt"
	"strconv"
	"strings"
	"unicode"

	"6.5840/mr"
)

const pageNum = 8398 // number of pages

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect digit pairs.
	ff := func(r rune) bool { return !unicode.IsDigit(r) }

	// split contents into an array of numbers.
	number_pairs := strings.Split(contents, "\n")

	kva := []mr.KeyValue{}
	for _, w := range number_pairs {
		if w == "" {
			continue
		}

		// split each number pair into two numbers.
		nums := strings.FieldsFunc(w, ff)
		if len(nums) != 2 {
			continue
		}
		kv := mr.KeyValue{Key: nums[0], Value: nums[1]}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
func Reduce(key string, values []string) string {

	var pages map[int]int = make(map[int]int)

	//sum the destination page numbers.
	for _, v := range values {
		i, err := strconv.Atoi(v)
		if err != nil {
			continue
		}
		pages[i] += 1
	}

	ret := ""
	//calculate the pagerank of the every visited page.
	for i, v := range pages {
		pr := float64(v) * 1.0 / float64(len(values))
		ret += fmt.Sprintf("%d:%.10f ", i, pr)
	}
	fmt.Sprintln(ret)
	return ret
}
